<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function imaginelex_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = is_object($node) ? 'page__' . $node->bundle() : 'page';
  }
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
  }
}


/**
 * Implements hook_preprocess_page().
 */
function imaginelex_preprocess_page(&$variables) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node && $node->bundle() == 'policy') { // check for only policy nodes
    $heroId = 0;
    if ($tid = \Drupal::request()->get('topic')) { // if coming from topic accordion get the topic tax term
      $topic = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
      $heroId = $topic->field_hero_image[0]->target_id;
    } else if ($tid = \Drupal::request()->get('theme')) { // if coming from a theme accordion get the theme node
      $theme = \Drupal::entityTypeManager()->getStorage('node')->load($tid);
      $heroId = $theme->field_image[0]->target_id;
    }

    if ($heroId) { // check for the hero variable
      $file = \Drupal\file\Entity\File::load($heroId);
      $uri = $file->getFileUri();
      $variables['policy_hero'] = $uri; // get the hero image that corresponds
    }

    $variables['title'] = $node->get('field_short_name')->value;
    $variables['policy_name'] = $node->get('field_short_name')->value;
  }

  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $variables['term'] = $term;
  }

}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function imaginelex_preprocess_views_view_fields(&$variables) {
  $view = $variables['view'];
  $row = $variables['row'];

  switch($view->id()) {
    case 'placebuilder';
      if ($view->current_display == 'block_2') {
        $variables['accordion_header_color'] = $row->_entity->field_color->color;
      } else if ($view->current_display == 'block_3') {
        foreach ($view->result as $rid => $row) {
          foreach ($view->field as $fid => $field) {
              $datas[$rid][$fid . '_value'] = $field->getValue($row);
          }
        }
        $variables['accordion_group_color'] = $datas[0]['field_color_value'];
      }
      break;
    default:
      break;
  }
}
/**
 * Implements hook_preprocess_views_accordion_view().
 */
function imaginelex_preprocess_views_accordion_view(&$variables) {
  $view = $variables['view'];
  switch($view->id()) {
    case 'placebuilder';
       if ($view->current_display == 'block_3') {
        foreach ($view->result as $rid => $row) {
          if ($rid == 0) {
            foreach ($view->field as $fid => $field) {
                $datas[$rid][$fid . '_value'] = $field->getValue($row);
            }
          }
        }
        $variables['accordion_group_color'] = $datas[0]['field_color_value'];
      }
      break;
    case 'policy_accordions':
      if ($view->current_display == 'block_1') {
        $node = \Drupal::routeMatch()->getParameter('node');
        if ($color = $node->field_color->color) {
          $variables['accordion_group_color'] = $color;
        };
      }
      break;
    case 'taxonomy_term';
        $variables['accordion_group_color'] = '#75B646';
      break;
    case 'theme_cards';
      if ($view->current_display == 'block_1') {
        foreach ($view->result as $rid => $row) {
          foreach ($view->field as $fid => $field) {
              $datas[$rid][$fid . '_value'] = $field->getValue($row);
          }
        }
        $variables['accordion_group_color'] = $datas[0]['field_color_value'];
      }
      break;
    case 'policies_for_rural_developments';
        $variables['accordion_group_color'] = '#fff';
      break;
    default:
      break;
  }
}
/**
 * Implements hook_preprocess_node().
 */
function imaginelex_preprocess_node(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (isset($node->field_color) && $color = $node->field_color->color) {
    $variables['border_color'] = $color;
  };
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function imaginelex_preprocess_views_view_field(&$variables) {
  if ($variables['view']->id() == 'taxonomy_term' && $variables['field']->field == 'body') {
    $output = $variables['field']->getValue($variables['row']);
    $variables['output'] = ['#markup'=> sentenceTrim($output, 400)];
  }
}

// helper function to trim to 300 character at the nearest .
function sentenceTrim($string, $maxLength = 300) {
  $string = preg_replace('/\s+/', ' ', trim($string)); // Replace new lines (optional)

  if (mb_strlen($string) >= $maxLength) {
      $string = mb_substr($string, 0, $maxLength);

      $puncs  = array('. ', '! ', '? '); // Possible endings of sentence
      $maxPos = 0;

      foreach ($puncs as $punc) {
          $pos = mb_strrpos($string, $punc);

          if ($pos && $pos > $maxPos) {
              $maxPos = $pos;
          }
      }

      if ($maxPos) {
          return mb_substr($string, 0, $maxPos + 1);
      }

      return rtrim($string) . '&hellip;';
  } else {
      return $string;
  }
}
